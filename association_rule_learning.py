# -*- coding: utf-8 -*-
"""Association Rule Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s5Gaj8UQbDCVe6wzbqzPHxQhb9lYfwZM
"""

!pip install mlxtend
!pip install pyfpgrowth
!pip install efficient-apriori
!pip install spmf

!pip install mlxtend pyfpgrowth efficient-apriori pandas

!pip install mlxtend pyfpgrowth efficient-apriori pandas matplotlib seaborn

import pandas as pd
import random
import matplotlib.pyplot as plt
import seaborn as sns
from mlxtend.frequent_patterns import apriori, association_rules
import pyfpgrowth
from efficient_apriori import apriori as eclat_apriori
items = [
    'Milk', 'Bread', 'Butter', 'Cheese', 'Eggs', 'Apple', 'Banana', 'Orange', 'Carrot', 'Cucumber',
    'Laptop', 'Smartphone', 'Headphones', 'TV', 'Camera', 'Smartwatch', 'Shirt', 'Jeans', 'Jacket',
    'Shoes', 'Socks', 'Toothpaste', 'Shampoo', 'Toothbrush', 'Towels', 'Sunglasses', 'Charger', 'Coffee Maker'
]

def generate_transactions(num_transactions=1000):
    transactions = []
    for _ in range(num_transactions):
        num_items = random.randint(3, 7)
        transaction_items = random.sample(items, num_items)
        transactions.append(transaction_items)
    return transactions

transactions = generate_transactions(1000)

def transactions_to_df(transactions, items):
    df = pd.DataFrame(0, index=range(len(transactions)), columns=items)
    for idx, transaction in enumerate(transactions):
        for item in transaction:
            df.at[idx, item] = 1
    return df

df_transactions = transactions_to_df(transactions, items)
print("Sample of Synthetic Data:\n", df_transactions.head())

def apriori_algorithm(df, min_support=0.01, min_threshold=1.0):
    print("\nRunning Apriori Algorithm...")
    frequent_itemsets = apriori(df, min_support=min_support, use_colnames=True)
    rules = association_rules(frequent_itemsets, metric="lift", min_threshold=min_threshold)
    return frequent_itemsets, rules

def fp_growth_algorithm(transactions, min_support=3, min_confidence=0.7):
    print("\nRunning FP-Growth Algorithm...")
    patterns = pyfpgrowth.find_frequent_patterns(transactions, min_support)

    rules = []
    total_transactions = len(transactions)

    for pattern in patterns:
        if len(pattern) > 1:

            for consequent in pattern:
                antecedent = [item for item in pattern if item != consequent]
                antecedent_support = sum(1 for t in transactions if all(item in t for item in antecedent))
                consequent_support = sum(1 for t in transactions if consequent in t and all(item in t for item in antecedent))

                confidence = consequent_support / antecedent_support if antecedent_support > 0 else 0

                if confidence >= min_confidence:
                    rules.append((antecedent, consequent, consequent_support, confidence))

    return patterns, rules

def eclat_algorithm(df, min_support=0.2, min_confidence=0.6):
    print("\nRunning Eclat Algorithm...")
    transactions = df.values.tolist()
    itemsets, rules = eclat_apriori(transactions, min_support=min_support, min_confidence=min_confidence)
    return itemsets, rules

def plot_frequent_itemsets(frequent_itemsets):
    itemsets_support = frequent_itemsets['support']
    itemsets_length = frequent_itemsets['itemsets'].apply(lambda x: len(x))

    plt.figure(figsize=(10, 6))
    sns.histplot(itemsets_support, kde=True, color='skyblue', bins=30)
    plt.title('Distribution of Frequent Itemsets Support')
    plt.xlabel('Support')
    plt.ylabel('Frequency')
    plt.show()

    top_itemsets = frequent_itemsets.nlargest(10, 'support')
    top_itemsets['itemsets'] = top_itemsets['itemsets'].apply(lambda x: ', '.join(list(x)))
    plt.figure(figsize=(10, 6))
    sns.barplot(x='support', y='itemsets', data=top_itemsets, palette='viridis')
    plt.title('Top 10 Frequent Itemsets')
    plt.xlabel('Support')
    plt.ylabel('Itemsets')
    plt.show()

def plot_association_rules(rules):
    if not rules.empty:
        plt.figure(figsize=(10, 6))
        sns.scatterplot(x='confidence', y='lift', data=rules, color='orange')
        plt.title('Association Rules: Confidence vs Lift')
        plt.xlabel('Confidence')
        plt.ylabel('Lift')
        plt.show()

def main():

    apriori_itemsets, apriori_rules = apriori_algorithm(df_transactions)
    print("Apriori - Frequent Itemsets:\n", apriori_itemsets.head())
    print("Apriori - Association Rules:\n", apriori_rules.head())

    plot_frequent_itemsets(apriori_itemsets)
    plot_association_rules(apriori_rules)

    fp_patterns, fp_rules = fp_growth_algorithm(transactions)
    print("FP-Growth - Frequent Patterns:\n", fp_patterns)
    print("FP-Growth - Association Rules:\n", fp_rules)

    eclat_itemsets, eclat_rules = eclat_algorithm(df_transactions)
    print("Eclat - Frequent Itemsets:\n", eclat_itemsets)
    print("Eclat - Association Rules:\n", eclat_rules)

if __name__ == "__main__":
    main()